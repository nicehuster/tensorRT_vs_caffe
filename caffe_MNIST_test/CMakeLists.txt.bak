# 设定依赖的CMake版本
CMAKE_MINIMUM_REQUIRED(VERSION 3.2)
# 指定项目名称
PROJECT(caffe_MNIST_test)

# 使CMake支持C++11特性
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu++0x")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++0x")

# 搜索指定的OpenCV外部依赖库头文件和库文件位置
FIND_PACKAGE(OpenCV 3)
message(STATUS "OpenCV library status:")
message(STATUS "    version: ${OpenCV_VERSION}")
message(STATUS "    libraries: ${OpenCV_LIBS}")
message(STATUS "    include path: ${OpenCV_INCLUDE_DIRS}")

# Add OpenCV headers location to your include paths
INCLUDE_DIRECTORIES(${OpenCV_INCLUDE_DIRS})       #将openCV头文件包含进工程


# 搜索指定的CUDA外部依赖库头文件和库文件位置
FIND_PACKAGE(CUDA)

#将目录下的头文件包含进来
INCLUDE_DIRECTORIES("${CMAKE_SOURCE_DIR}") 

# 指定CUDA头文件的搜索路径
INCLUDE_DIRECTORIES(/usr/local/cuda/include)
# 指定TensorRT头文件的搜索路径
INCLUDE_DIRECTORIES(/home/niceliu/data/caffe/include)
# 指定cudnn头文件的搜索路径
INCLUDE_DIRECTORIES(/usr/local/cuda/include)

# 指定TensorRT动态库搜索路径
LINK_DIRECTORIES(/home/niceliu/data/caffe/build/lib)
# 指定cudnn动态库搜索路径
LINK_DIRECTORIES(/usr/local/cuda/lib64)
# 指定cuda动态库搜索路径
LINK_DIRECTORIES(/usr/local/cuda/lib64)

# 递归查询所有匹配的文件:*.cpp和*.cu
FILE(GLOB CPP_LIST "${CMAKE_SOURCE_DIR}/*.cpp")


MESSAGE(STATUS "cpp list: ${CPP_LIST}")
SET(CUDA_PROPAGATE_HOST_FLAGS ON)

LIST(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_50,code=sm_50)
LIST(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_60,code=sm_60)

# 编译可执行程序，即生成可执行文件TensorRT_Test
#ADD_EXECUTABLE(TensorRT_Test ${CPP_LIST} ${CU_LIST}) # 不包括编译*.cu文件，需要使用CUDA_ADD_EXECUTABLE命令
CUDA_ADD_EXECUTABLE(caffe_MNIST_test ${CPP_LIST})
# 用来为target添加需要链接的共享库，指定工程所用的依赖库，包括动态库和静态库
TARGET_LINK_LIBRARIES(caffe_MNIST_test ${OpenCV_LIBS} caffe cudnn cublas boost_system glog)
